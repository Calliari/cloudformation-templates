AWSTemplateFormatVersion: 2010-09-09
Description: 'CloudFormation Blog Activity'
Parameters:
  WebServerKeyName:
    Description: "The key pair to establish a SSH connection to the web servers."
    Type: "AWS::EC2::KeyPair::KeyName"
Resources:
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: 10.99.0.0/16
      EnableDnsHostnames: 'true'
      EnableDnsSupport: 'true'
      Tags:
        - Key: Name
          Value: BlogVPC
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties: {}
  VPCGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  DMZ1public:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select
        - '0'
        - !GetAZs ''
      CidrBlock: 10.99.1.0/24
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: DMZ1public
  DMZ2public:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select
        - '1'
        - !GetAZs ''
      CidrBlock: 10.99.2.0/24
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: DMZ2public
  AppLayer1private:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select
        - '0'
        - !GetAZs ''
      CidrBlock: 10.99.11.0/24
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: AppLayer1private
  AppLayer2private:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select
        - '1'
        - !GetAZs ''
      CidrBlock: 10.99.12.0/24
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: AppLayer2private  
  PublicRT:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: PublicRT
  RouteTableAssociationA:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref DMZ1public
      RouteTableId: !Ref PublicRT
  RouteTableAssociationB:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref DMZ2public
      RouteTableId: !Ref PublicRT
  RoutePublicNATToInternet:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref PublicRT
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
    DependsOn: VPCGatewayAttachment
  NATElasticIP:
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: vpc
    DependsOn: VPCGatewayAttachment
  NATGateway:
    Type: 'AWS::EC2::NatGateway'
    DependsOn: NATElasticIP
    Properties:
      AllocationId: !GetAtt
        - NATElasticIP
        - AllocationId
      SubnetId: !Ref DMZ2public
  NATGatewayRoute:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref PrivateRT
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway
  PrivateRT:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: PrivateRT
  RouteTableAssociationC:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref AppLayer1private
      RouteTableId: !Ref PrivateRT
  RouteTableAssociationD:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref AppLayer2private
      RouteTableId: !Ref PrivateRT
  DMZNACL:
    Type: 'AWS::EC2::NetworkAcl'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: DMZNACL
  SubnetNetworkAclAssociationA:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref DMZ1public
      NetworkAclId: !Ref DMZNACL
  SubnetNetworkAclAssociationB:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref DMZ2public
      NetworkAclId: !Ref DMZNACL
  DMZNACLEntryIngress100:
    Type: 'AWS::EC2::NetworkAclEntry'
    DependsOn: DMZNACL
    Properties:
      NetworkAclId: !Ref DMZNACL
      RuleNumber: '100'
      Protocol: '6'
      PortRange:
        From: '22'
        To: '22'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
  DMZNACLEntryIngress110:
    Type: 'AWS::EC2::NetworkAclEntry'
    DependsOn: DMZNACL
    Properties:
      NetworkAclId: !Ref DMZNACL
      RuleNumber: '110'
      Protocol: '6'
      PortRange:
        From: '80'
        To: '80'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
  DMZNACLEntryIngress120:
    Type: 'AWS::EC2::NetworkAclEntry'
    DependsOn: DMZNACL
    Properties:
      NetworkAclId: !Ref DMZNACL
      RuleNumber: '120'
      Protocol: '6'
      PortRange:
        From: '443'
        To: '443'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
  DMZNACLEntryIngress130:
    Type: 'AWS::EC2::NetworkAclEntry'
    DependsOn: DMZNACL
    Properties:
      NetworkAclId: !Ref DMZNACL
      RuleNumber: '130'
      Protocol: '6'
      PortRange:
        From: '1024'
        To: '65535'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
  DMZNACLEntryEgress100:
    Type: 'AWS::EC2::NetworkAclEntry'
    DependsOn: DMZNACL
    Properties:
      NetworkAclId: !Ref DMZNACL
      RuleNumber: '100'
      Protocol: '6'
      PortRange:
        From: '22'
        To: '22'
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
  DMZNACLEntryEgress110:
    Type: 'AWS::EC2::NetworkAclEntry'
    DependsOn: DMZNACL
    Properties:
      NetworkAclId: !Ref DMZNACL
      RuleNumber: '110'
      Protocol: '6'
      PortRange:
        From: '80'
        To: '80'
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
  DMZNACLEntryEgress120:
    Type: 'AWS::EC2::NetworkAclEntry'
    DependsOn: DMZNACL
    Properties:
      NetworkAclId: !Ref DMZNACL
      RuleNumber: '120'
      Protocol: '6'
      PortRange:
        From: '443'
        To: '443'
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
  DMZNACLEntryEgress130:
    Type: 'AWS::EC2::NetworkAclEntry'
    DependsOn: DMZNACL
    Properties:
      NetworkAclId: !Ref DMZNACL
      RuleNumber: '130'
      Protocol: '6'
      PortRange:
        From: '1024'
        To: '65535'
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
  AppNACL:
    Type: 'AWS::EC2::NetworkAcl'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: AppNACL
  SubnetNetworkAclAssociationC:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref AppLayer1private
      NetworkAclId: !Ref AppNACL
  SubnetNetworkAclAssociationD:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref AppLayer2private
      NetworkAclId: !Ref AppNACL
  AppNACLEntryIngress100:
    Type: 'AWS::EC2::NetworkAclEntry'
    DependsOn: AppNACL
    Properties:
      NetworkAclId: !Ref AppNACL
      RuleNumber: '100'
      Protocol: '6'
      PortRange:
        From: '22'
        To: '22'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 10.99.0.0/16
  AppNACLEntryIngress110:
    Type: 'AWS::EC2::NetworkAclEntry'
    DependsOn: AppNACL
    Properties:
      NetworkAclId: !Ref AppNACL
      RuleNumber: '110'
      Protocol: '6'
      PortRange:
        From: '80'
        To: '80'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 10.99.0.0/16
  AppNACLEntryIngress120:
    Type: 'AWS::EC2::NetworkAclEntry'
    DependsOn: AppNACL
    Properties:
      NetworkAclId: !Ref AppNACL
      RuleNumber: '120'
      Protocol: '6'
      PortRange:
        From: '443'
        To: '443'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 10.99.0.0/16
  AppNACLEntryIngress130:
    Type: 'AWS::EC2::NetworkAclEntry'
    DependsOn: AppNACL
    Properties:
      NetworkAclId: !Ref AppNACL
      RuleNumber: '130'
      Protocol: '6'
      PortRange:
        From: '1024'
        To: '65535'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
  AppNACLEntryEgress110:
    Type: 'AWS::EC2::NetworkAclEntry'
    DependsOn: AppNACL
    Properties:
      NetworkAclId: !Ref AppNACL
      RuleNumber: '110'
      Protocol: '6'
      PortRange:
        From: '80'
        To: '80'
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
  AppNACLEntryEgress120:
    Type: 'AWS::EC2::NetworkAclEntry'
    DependsOn: AppNACL
    Properties:
      NetworkAclId: !Ref AppNACL
      RuleNumber: '120'
      Protocol: '6'
      PortRange:
        From: '443'
        To: '443'
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
  AppNACLEntryEgress130:
    Type: 'AWS::EC2::NetworkAclEntry'
    DependsOn: AppNACL
    Properties:
      NetworkAclId: !Ref AppNACL
      RuleNumber: '130'
      Protocol: '6'
      PortRange:
        From: '1024'
        To: '65535'
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 10.99.0.0/16

Outputs:
  StackName:
    Description: Exporting the stack name to be used in an cross-stack template references
    Value: !Ref VPC
    Export:
      Name: !Sub "${AWS::StackName}"
  VPC:
    Description: Exporting the VPC ID to be used in an cross-stack template references
    Value: !Ref VPC
    Export:
      Name: !Sub "${AWS::StackName}-VPC-ID"
